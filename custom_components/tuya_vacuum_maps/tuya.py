"""Handles communication with the Tuya Cloud API."""

import uuid
import datetime
import hmac
import requests


class TuyaCloudAPI:
    """Handles communication with the Tuya Cloud API."""

    def __init__(self, base: str, client_id: str, client_secret: str) -> None:
        self.base = base
        self.client_id = client_id
        self.client_secret = client_secret

    def _generate_signature(
        self,
        endpoint: str,
        timestamp: str,
        nonce: str,
        access_token: str = "",
    ) -> str:
        """Generate signature to make requests to APIs."""
        # https://developer.tuya.com/en/docs/iot/new-singnature

        # The SHA256 hash of a empty request body
        empty_body_hash = (
            "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
        )

        http_method = "GET"

        # TODO: Implement Optional_Signature_key
        optional_signature_key = ""

        str_to_sign = (
            f"{self.client_id}"
            f"{access_token}"
            f"{timestamp}"
            f"{nonce}"
            f"{http_method}\n"
            f"{empty_body_hash}\n"
            f"{optional_signature_key}\n"
            f"{endpoint}"
        )

        signature = (
            hmac.new(
                self.client_secret.encode(),
                msg=str_to_sign.encode(),
                digestmod="sha256",
            )
            .hexdigest()
            .upper()
        )

        return signature

    def _request(self, endpoint: str, access_token: str = "") -> dict:
        """Makes a request to the Tuya Cloud API."""

        # The 13-digit timestamp
        timestamp = str(int(round(datetime.datetime.now().timestamp() * 1000, 0)))

        # UUID generated for each API request
        # 32-character lowercase hexadecimal string
        nonce = uuid.uuid4().hex

        # Generate sign
        signature = self._generate_signature(
            endpoint=endpoint,
            timestamp=timestamp,
            nonce=nonce,
            access_token=access_token,
        )

        # https://developer.tuya.com/en/docs/iot/api-request?id=Ka4a8uuo1j4t4
        headers = {
            "client_id": self.client_id,  # The user ID
            "sign": signature,  # The signature generated by signature algorithm
            "sign_method": "HMAC-SHA256",  # The signature digest algorithm
            "t": timestamp,  # The 13-digit timestamp
            "lang": "en",  # (optional) The type of language
            "nonce": nonce,  # (optional) The UUID generated for each API request
        }

        # If this is a General Business API, the access token is required
        if access_token:
            headers["access_token"] = access_token

        response = requests.get(
            self.base + endpoint, headers=headers, timeout=2.5
        ).json()

        if not response["success"]:
            raise RuntimeError(response["msg"])

        return response

    def request(self, endpoint: str) -> dict:
        """Make authenticated request to the Tuya Cloud API."""

        # Get access token
        response = self._request("/v1.0/token?grant_type=1")

        access_token = response["result"]["access_token"]

        response = self._request(endpoint, access_token)

        return response
